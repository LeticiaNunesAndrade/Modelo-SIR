import numpy as np
import pandas as pd
from scipy.integrate import odeint
import streamlit as st
import matplotlib.pyplot as plt
import io


def executar_sird():
    """"
    Executa o modelo epidemiol√≥gico SIRD cl√°ssico quando chamada no main
    """

    st.header('Simula√ß√£o - Modelo SIRD')

    # Exibe a barra lateral e os seus elementos
    with st.sidebar:
        st.header('Popula√ß√£o Inicial')
        N = st.number_input(f'Popula√ß√£o Total ($N$)', 1, 10_000_000_000, 10_000)
        I0 = st.number_input(f'Infectados iniciais ($I_0$)', 1, N, 100)
        S0 = N - I0 # Suscept√≠veis iniciais
        R0 = 0 # Recuperados iniciais
        D0 = 0 # mortos iniciais

        # Sliders para os par√¢metros
        st.header('Par√¢metros do Modelo')
        beta = st.slider(r'Taxa de transmiss√£o ($\beta$)', 0.0, 1.0, 0.3, 0.01)
        gamma = st.slider(f'Taxa de recupera√ß√£o ($\gamma$)', 0.0, 1.0, 0.1, 0.01)
        mu = st.slider(f'Taxa de mortalidade ($\mu$)', 0.0, 0.5, 0.01, 0.01)
        dias = st.slider('Dias de simula√ß√£o', 1, 360, 160, 1)

        # Sele√ß√£o das curvas exibidas no gr√°fico
        st.subheader('Curvas exibidas')
        mostrar_S = st.checkbox('Suscept√≠veis', value=True)
        mostrar_I = st.checkbox('Infectados', value=True)
        mostrar_R = st.checkbox('Recuperados', value=True)
        mostrar_D = st.checkbox('Mortos', value=True)
        
    # Per√≠odo de simula√ß√£o (dias)
    t = np.linspace(0, dias, dias)

    def modelo_sird(vetor, t):
        """
        Calcula as derivadas das vari√°veis do modelo epidemiol√≥gico SIRD

        Par√¢metros:
        vetor: lista ou array contendo os valores atuais de [S, I, R, D] no tempo t
        t: tempo atual (passado automaticamente por odeint e n√£o usado diretamente nessa fun√ß√£o)

        Retorna:
        Lista com as derivadas correspondentes aos compartimentos:
        [dS/dt, dI/dt, dR/dt, dD/dt]
        """
        S, I, R, D = vetor

        # O n√∫mero de suscept√≠veis reduz, por isso beta est√° negativo
        dS = -beta * S * I / N 
    
        # O primeiro termo calcula o n√∫mero de novas infec√ß√µes e o segundo, o n√∫mero de recupera√ß√µes
        # O termo (gamma * I) corresponde √† recupera√ß√£o dos infectados
        # O termo (mu * I) representa a redu√ß√£o de infectados devido a √≥bitos causados pela doen√ßa
        dI = beta * S * I / N - gamma * I - mu * I

        # O n√∫mero de recuperados aumenta conforme os infectados se recuperam
        dR = gamma * I

        # O n√∫mero de mortos aumenta proporcionalmente ao n√∫mero de infectados (mu)
        dD = mu * I

        return np.array([dS, dI, dR, dD])

    # Condi√ß√µes iniciais
    vetor_inicial = [S0, I0, R0, D0]

    # Integra numericamente o sistema de equa√ß√µes diferenciais ao longo do per√≠odo definido (t)
    resultado = odeint(modelo_sird, vetor_inicial, t)
    # Transoi√ß√£o matricial para a plotagem dos dados
    S, I, R, D = resultado.T

    # C√°lculo e exibi√ß√£o do n√∫mero b√°sico de reprodu√ß√£o
    R0_basic = beta / (gamma + mu)
    st.write(f'N√∫mero b√°sico de reprodu√ß√£o ($R_0$): {R0_basic:.2f}')


    # Plotagem das curvas selecionadas
    fig, ax = plt.subplots(figsize=(12, 6))
    if mostrar_S:
        ax.plot(t, S, 'b', label='Suscept√≠veis')
    if mostrar_I:
        ax.plot(t, I, 'r', label='Infectados')
    if mostrar_R:
        ax.plot(t, R, 'g', label='Recuperados')
    if mostrar_D:
        ax.plot(t, D, 'k', label='Mortos')

    # Configura√ß√µes do gr√°fico
    ax.set_title('Evolu√ß√£o da Epidemia - Modelo SIR')
    ax.set_xlabel('Dias')
    ax.set_ylabel('N√∫mero de Indiv√≠duos')
    ax.legend()
    ax.grid(True)
    st.pyplot(fig) # Exibe o gr√°fico


    # Encontra o dia e o valor correspondente ao pico de infec√ß√µes
    pico = t[np.argmax(I)]
    max_infeccoes = np.max(I)

    # Exibe os resultados dos picos
    st.subheader('Pico da Epidemia (M√°ximo de Infectados)')
    st.markdown(f"""
    - **Dia do pico**: {int(pico)}  
    - **N√∫mero m√°ximo de infectados simult√¢neos**: {int(max_infeccoes)}  
    """)


    # Valores finais de cada vari√°vel
    st.subheader('Distribui√ß√£o final da popula√ß√£o')
    col1, col2, col3, col4 = st.columns(4)

    total_final = S[-1] + I[-1] + R[-1] + D[-1]

    with col1:
        st.metric('suscept√≠veis finais (S)', value=f'{int(S[-1])}', delta=f'{int(S[-1] - S0)}')
        st.metric('% suscept√≠veis', value=f'{(S[-1]/total_final)*100:.2f}%')

    with col2:
        st.metric('Infectados finais (I)', value=f'{int(I[-1])}', delta=f'{int(I[-1] - I0)}')
        st.metric('% Infectados', value=f'{(I[-1]/total_final)*100:.2f}%')

    with col3:
        st.metric('Recuperados finais (R)', value=f'{int(R[-1])}', delta=f'{int(R[-1] - R0)}')
        st.metric('% Recuperados', value=f'{(R[-1]/total_final)*100:.2f}%')

    with col4:
        st.metric('Mortos finais (D)', value=f'{int(D[-1])}', delta=f'{int(D[-1] - D0)}')
        st.metric('% Mortos', value=f'{(D[-1]/total_final)*100:.2f}%')


    st.subheader('Download dos Dados')
    # Bot√£o de download do gr√°fico em PNG
    buf = io.BytesIO()
    fig.savefig(buf, format='png')
    buf.seek(0)
    st.download_button(
        label='üìä Download Gr√°fico',
        data=buf.getvalue(),
        file_name='grafico_epidemia.png',
        mime='image/png'
    )

    # Bot√£o de download dos dados em CSV
    df_dados = pd.DataFrame({
        'Dia': t,
        'Suscept√≠veis': S,
        'Infectados': I,
        'Recuperados': R,
    })

    csv_data = df_dados.to_csv(index=False).encode('utf-8')
    st.download_button(
        label='üìÑ Download CSV',
        data=csv_data,
        file_name='dados_epidemia.csv',
        mime='text/csv'
    )
